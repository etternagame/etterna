--- NoteField class
--
-- This class contains the components responsible for displaying notes in gameplay.
-- The simplest way to get the NoteField in gameplay is `SCREENMAN:GetTopScreen():GetChild("PlayerP1"):GetChild("NoteField")`.
--
-- This class inherits all methods from these classes:
-- @{ActorFrame}
-- @{Actor}
-- @classmod NoteField


--- Set the function that executes every time the player steps.
-- The callback function has the parameters `(intColumn, TapNoteScore)`.
-- The callback function returns 2 values, `intColumn, TapNoteScore`.
-- The point of passing and returning these values is to be able to redirect them.
-- @see NoteField:Step
-- @tparam func callback A function to execute later
-- @return nil
function NoteField:set_step_callback(callback)
end

--- Set the function that executes every time the player presses a column.
-- The callback function has the parameter `(intColumn)`.
-- The callback function returns 1 value, `intColumn`.
-- The point of passing and returning the column is to be able to redirect column numbers.
-- @see NoteField:set_pressed
-- @tparam func callback A function to execute later
-- @return nil
function NoteField:set_set_pressed_callback(callback)
end

--- Set the function that executes every time the player tapped on a note.
-- The callback function has the parameters `(intColumn, TapNoteScore, boolBright)`.
-- The callback function returns 3 values, `intColumn, TapNoteScore, boolBright`.
-- The point of passing and returning these values is to be able to redirect them.
-- The boolBright parameter is usually true when the current combo has passed BrightGhostComboThreshold.
-- @see NoteField:did_tap_note
-- @tparam func callback A function to execute later
-- @return nil
function NoteField:set_did_tap_note_callback(callback)
end

--- Set the function that executes every time the player taps on the head of a hold or roll.
-- The callback function has the parameters `(intColumn, HoldNoteScore, boolBright)`.
-- The callback function returns 3 values, `intColumn, HoldNoteScore, boolBright`.
-- The point of passing and returning these values is to be able to redirect them.
-- The boolBright parameter is usually true when the current combo has passed BrightGhostComboThreshold.
-- @see NoteField:did_hold_note
-- @tparam func callback A function to execute later
-- @return nil
function NoteField:set_did_hold_note_callback(callback)
end

--- Run the Step action on a given column and @{TapNoteScore}.
-- Note that this does not trigger the callback function that can be set from Lua.
-- @tparam int column The 1-indexed column to step on, starting from the left.
-- @tparam TapNoteScore tns The TapNoteScore to emulate on the given column.
-- @return nil
function NoteField:step(column, tns)
end

--- Run the SetPressed action on a given column.
-- Note that this does not trigger the callback function that can be set from Lua.
-- Setting a column to pressed will set it as unpressed at the next update as long as the button is not held by the player.
-- @tparam int column The 1-indexed column to set as pressed, starting from the left.
-- @return nil
function NoteField:set_pressed(column)
end

--- Run the DidTapNote action on a given column and @{TapNoteScore}.
-- Note that this does not trigger the callback function that can be set from Lua.
-- @tparam int column The 1-indexed column to trigger DidTapNote, starting from the left.
-- @tparam TapNoteScore tns The TapNoteScore to emulate on the given column.
-- @tparam bool bright Set to true to signal that the bright state should be active. Bright is usually enabled for combos above BrightGhostComboThreshold.
-- @return nil
function NoteField:did_tap_note(column, tns, bright)
end

--- Run the DidHoldNote action on a given column and @{HoldNoteScore}.
-- Note that this does not trigger the callback function that can be set from Lua.
-- @tparam int column The 1-indexed column to trigger DidHoldNote, starting from the left.
-- @tparam HoldNoteScore hns The HoldNoteScore to emulate on the given column.
-- @tparam bool bright Set to true to signal that the bright state should be active. Bright is usually enabled for combos above BrightGhostComboThreshold.
-- @return nil
function NoteField:did_hold_note(column, hns, bright)
end

--- Get the @{NoteColumnRenderer}s for each column.
-- Using these, you can manipulate each individual column in the NoteField.
-- @treturn {NoteColumnRenderer,...} A table of NoteColumnRenderers starting from the left
function NoteField:get_column_actors()
end

--- Toggle showing the beat bars in the NoteField board (behind the notes).
-- Ordinarily, beat bars become visible if the metric ShowBeatBars is enabled. Setting this to true overrides that.
-- Turning this off while the metric is turned on, however, does not force the bars off.
-- The beat bars are typically visible for each measure, but can be more often depending on your metrics.
-- See BarMeasureAlpha, Bar4thAlpha, Bar8thAlpha, Bar16thAlpha in metrics.
-- @tparam bool state True when you want the bars to be on.
function NoteField:show_beat_bars(state)
end

--- Toggle showing the interval bars in the NoteField board (behind the notes).
-- The interval bars are simply bars that are aligned to each half second in time.
-- Their use is to be aligned to the intervals of notes that are passed to the difficulty calculator, so they are not practical otherwise.
-- @tparam bool state True when you want the bars to be on.
function NoteField:show_interval_bars(state)
end
